package book.part5

// 델리게이션은 디자인 패턴
    // 어댑터와 유사하지만 서로 다른 개념
        // 어댑터 : n개를 같은 API로 사용하려는 게 목적
            // '제공된 것'과 '제공할 것'의 API가 다름
        // 위임 패턴 : 원래 본인이 수행해야 하는 일정 정도의 업무를 다른 곳에 위임하는 게 목적
            // 위임 패턴은 위임자와 대행자가 같은 API를 갖음
    // 특정 처리를 대행자에게 위임을 넘디
    // by 예약어 사용

// 위임자 클래스에서 대행자를 호출하는 구문이 by에 의해 자동으로 작성된다는 개념, 이를 위해서는 약간의 규칙에 맞게 인터페이스, 클래스를 준비해야함


// 델리게이션 프로퍼티
    // 프로퍼티에서도 위임을 제공
        // 예를들어, getter/setter가 동일한 로직으로 구성 -> 해당 로직을 구현하는 클래스를 만들어서 처리를 위임

    // 프로퍼티에서 동일하게 사용하는 로직을 클래스로 분리 -> 위임 처리
        // 중복 제거
        // 재활용


