package book.part5

// 리플렉션
    // 투영, 반사
    // 클래스, 함수, 프로퍼티의 래퍼런스를 런타임 때 동적으로 분석하는 것이 목적
    // 런타임 때 프로그램의 구조(객체, 함수, 프로퍼티)를 분석
    // 런타임 때 결정되는 전달된 클래스의 이름, 클래스이 함수나 프로퍼티를 동적으로 판단

// 클래스 타입과 래퍼런스
    // 클래스 래퍼런스 : 클래스의 정보
        // 클래스 타입으로 선언한 곳에 특정 클래스의 래퍼런스를 대입하면 런타임 때 클래스에 대한 정보 분석 가능

    // 클래스 타입 : KClass<*>, "클래스명::class"로 표현

import kotlin.reflect.KClass

// 클래스의 객체가 생성되어 대입되는 것이 아닌, 클래스의 정보가 대입
val myVal : KClass<*> = String::class

fun myFun(arg : KClass<*>) {

}


// KClass를 통한 클래스 분석
    // (1) 생성자 분석
    // (2) 클래스 프로퍼티 분석
    // (3) 클래스 함수 분석

// 함수 레퍼런스와 프로퍼티 레퍼런스
    // 함수 레퍼런스 : "::함수명", KFunction<*> 타입
    // 프로퍼티 레퍼런스 : "::프로퍼티명", KProperty<*>, KMutableProperty<*>