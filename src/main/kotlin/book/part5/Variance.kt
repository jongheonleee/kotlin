package book.part5

// Variance : 가변, 공변을 의미, 타입과 관련된 개념, 상하위 관계에서 타입 변형과 관련 있음
    // 상하위 관계에 의한 캐스팅은 지네릭에 적용안됨
    // 지네릭은 타입, 클래스가 아님

// 지네릭 타입의 형 변환이 불가능함. 이를 invariance(무공변)이라고 함

// covariance
    // 공변
    // out, in 키워드 활용

// out 이란?
    // out으로 선언한 형식 타입은 하위 타입을 상위 타입으로 사용 가능, 상위 타입을 하위 타입에 대입할 수 없음


// out 어노테이션의 형식 타입 선언시 규칙
    // 1. 하위 제네릭 타입을 상위 제네릭 타입에 대입 가능
    // 2. 상위 제네릭 타입을 하위 제네릭 타입에 대입 불가능
    // 3. 함수의 반환 타입으로 선언 가능
    // 4. 함수의 매개변수 타입으로 선언 불가능
    // 5. val 프로퍼티에 선언 가능
    // 6. var 프로퍼티에 선언 불가능

// out을 쓰는 이유
    // out : 제네릭 Variance를 제공 -> 하위 제네릭 타입을 상위 제네릭 타입에 대입하기 위해
    // 제네릭 타입의 형 변환을 위함
    // List는 불변, MutableList는 가변
    // List에만 out 어노테이션이 선언되어 있음 -> List<Int>로 선언한 객체를 List<Number>에 대입가능
    // MutableList<Int>로 선언한 객체를 MutableList<Number>에 대입 불가능
        // MutableList는 가변 리스트 -> add()로 데이터 추가가능
        // 따라서, 초기에 선언한 타입으로만 이용하게 강제할 수밖에 없음

// in 이란?
    // 상위 제네릭 타입을 하위 제네릭 타입에 대입할 수 있게 해줌
    // in 어노테이션으로 선언한 제네릭을 contravariant(반공변)

// in 어노테이션의 형식 타입 선언시 규칙
    // 1. 하위 제네릭 타입을 상위 제네릭 타입에 대입 불가능
    // 2. 상위 제네릭 타입을 하위 제네릭 타입에 대입 가능
    // 3. 함수의 반환 타입으로 선언 불가능
    // 4. 함수의 매개변수 타입으로 선언 가능
    // 5. var 또는 val 프로퍼티에 선언 불가능


